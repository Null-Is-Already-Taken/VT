#if UNITY_EDITOR

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace VT.Tools.UITKConstantGenerator
{
    public static class UITKConstantGeneratorAPI
    {
        public static string GenerateClassContent(string uxmlPath, string className, bool useWrapperConstant = false)
        {
            string uxmlFolder = Path.GetDirectoryName(uxmlPath);
            string namespaceName = new DirectoryInfo(uxmlFolder).Name + ".AutoGenerated";

            string content = File.ReadAllText(uxmlPath);
            var uniqueNames = new HashSet<string>();

            var nameMatches = Regex.Matches(content, "name=\"([^\"]+)\"");
            foreach (Match match in nameMatches)
                uniqueNames.Add(match.Groups[1].Value);
            
            var uniqueIDs = new HashSet<string>();
            var uniqueClasses = new HashSet<string>();
            var styleMatches = Regex.Matches(content, "Style\\s+src=\"([^\"]+)\"");
            foreach (Match match in styleMatches)
            {
                string rawSrc = match.Groups[1].Value;
                string ussPath = UITKConstantTrackerHelper.NormalizeUSSPath(rawSrc);

                if (!File.Exists(ussPath)) continue;

                string ussContent = File.ReadAllText(ussPath);

                // Match class selectors: .className {
                var classMatches = Regex.Matches(ussContent, @"(?<=\.)[a-zA-Z0-9\-_]+(?=\s*\{)");
                foreach (Match cls in classMatches)
                    uniqueClasses.Add(cls.Value);

                // Match ID selectors: #ElementID {
                var idMatches = Regex.Matches(ussContent, @"(?<=#)[a-zA-Z0-9\-_]+(?=\s*\{)");
                foreach (Match id in idMatches)
                    uniqueIDs.Add(id.Value);
            }

            var sb = new StringBuilder();
            sb.AppendLine("// AUTO-GENERATED FILE â€” Do not edit manually");
            if (useWrapperConstant)
                sb.AppendLine("using VT.ReuseableSystems.UI.UITK;");
            sb.AppendLine();
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            sb.AppendLine($"    public partial class {className}");
            sb.AppendLine("    {");

            // Switch generation mode to use UITKConstant instead of string
            // bool USE_WRAPPER_CONSTANT = false;

            // For <VisualElement name="..."> in UXML:
            foreach (var name in uniqueNames)
            {
                string safe = Regex.Replace(name, @"[^\w]", "_");

                if (useWrapperConstant)
                    sb.AppendLine($"        public readonly UITKConstant {safe}_ElementName = new(type: UITKConstantType.ElementName, value: \"{name}\");");
                else
                    sb.AppendLine($"        public readonly string {safe}_ElementName = \"{name}\";");
            }

            // For #ID selectors in USS:
            foreach (var id in uniqueIDs)
            {
                string safe = Regex.Replace(id, @"[^\w]", "_");

                if (useWrapperConstant)
                    sb.AppendLine($"        public readonly UITKConstant {safe}_StyleID = new(type: UITKConstantType.Selector, value: \"{id}\");");
                else
                    sb.AppendLine($"        public readonly string {safe}_StyleID = \"{id}\";");
            }

            // For .class selectors in USS:
            foreach (var cls in uniqueClasses)
            {
                string safe = Regex.Replace(cls, @"[^\w]", "_");

                if (useWrapperConstant)
                    sb.AppendLine($"        public readonly UITKConstant {safe}_StyleClass = new(type: UITKConstantType.Selector, value: \"{cls}\");");
                else
                    sb.AppendLine($"        public readonly string {safe}_StyleClass = \"{cls}\";");
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");
            return sb.ToString();
        }

        public static string SanitizeClassName(string name)
        {
            string valid = Regex.Replace(name, @"[^\w]", "_");
            return char.ToUpper(valid[0]) + valid[1..] + "UXMLConstants";
        }
    }
}

#endif
